{"version":3,"file":"static/js/193.2ed8521d.chunk.js","mappings":"+QAIaA,EAAe,SAAC,GAAe,IAAD,EAAZC,EAAY,EAAZA,MAEvBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEVC,GAAWC,EAAAA,EAAAA,MAAXD,QAGDE,EAAcP,EAAMQ,OACtBR,EAAMQ,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,OAC3C,GAEIC,EAAI,UAAGZ,EAASa,aAAZ,aAAG,EAAgBD,KAM/B,OACE,4BACE,mBAAQE,QANK,WAAOZ,EAAQ,OAACU,QAAD,IAACA,EAAAA,EAAQ,UAAW,EAMhD,qBAICb,IAAS,wBAAKA,EAAMgB,SACrB,gBACEC,IAAG,0CAAqCjB,EAAMkB,aAC9CC,IAAKnB,EAAMgB,SAEb,4BACE,wCAAgBhB,EAAMoB,eAEtB,qCACA,uBAAIpB,EAAMqB,YAEV,mCACA,uBAAId,QAEN,4BACE,oDACA,SAAC,KAAD,CAASO,MAAO,CAACD,KAAAA,GAAOS,GAAE,kBAAajB,EAAb,YAA1B,UACE,sCAGF,SAAC,KAAD,CAASS,MAAO,CAACD,KAAAA,GAAOS,GAAE,kBAAajB,EAAb,SAA1B,UAEE,mCAEF,mBACA,SAAC,EAAAkB,SAAD,CAAUC,SAAU,KAApB,UACA,SAAC,KAAD,WAKP,ECpBD,EAjCwB,WAEpB,IAAOnB,GAAUC,EAAAA,EAAAA,MAAVD,QACJ,GAA0BoB,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOzB,EAAP,KAAc0B,EAAd,KACH,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAgBE,GAAhB,WACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAcG,GAAd,YACiB1B,EAAAA,EAAAA,MAmBrB,OAjBM2B,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGAEfH,GAAW,GAFI,UAIMI,EAAAA,EAAAA,IAAe1B,GAJrB,OAIT2B,EAJS,OAKfN,EAASM,GALM,gDAOfJ,EAAS,KAAMK,SAPA,yBASfN,GAAW,GATI,4EAAH,qDAYhBG,GACD,GAAE,CAACzB,KAIV,0BAEA,SAACN,EAAD,CAAeC,MAAOA,EAAOkC,GAAM7B,KAGlC,C,wLCjCK8B,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,OAAQ,MAKCC,EAAiB,mCAAG,2GAAOC,EAAP,+BAAc,EAAd,SACRP,EAASQ,IAAT,uBAAqC,CAC1DL,OAAQ,CACNI,KAAAA,KAH2B,uBACvBE,EADuB,EACvBA,KADuB,kBAOxBA,EAAKC,SAPmB,2CAAH,qDAWjBd,EAAc,mCAAG,WAAMG,GAAN,yFACLC,EAASQ,IAAT,iBAAuBT,IADlB,uBACpBU,EADoB,EACpBA,KADoB,kBAGrBA,GAHqB,2CAAH,sDAMdE,EAAY,mCAAG,WAAMC,GAAN,yFACHZ,EAASQ,IAAT,gBAA8B,CACnDL,OAAQ,CACNS,MAAAA,KAHsB,uBAClBH,EADkB,EAClBA,KADkB,kBAOnBA,EAAKC,SAPc,2CAAH,sDAUZG,EAAO,mCAAG,WAAMd,GAAN,yFACEC,EAASQ,IAAT,iBAAuBT,EAAvB,aADF,uBACbU,EADa,EACbA,KADa,kBAGdA,EAAKK,MAHS,2CAAH,sDAMPC,EAAU,mCAAG,WAAMhB,GAAN,yFACDC,EAASQ,IAAT,iBAAuBT,EAAvB,aADC,uBAChBU,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,qD","sources":["components/MovieDetails/MovieDetails.jsx","pages/MovieSinglePage/MovieSinglePage.jsx","services/api.jsx"],"sourcesContent":["\nimport { NavLink, Outlet, useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { Suspense } from 'react';\n\nexport const MovieDetails = ({ movie }) => {\n\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const {movieId} = useParams();\n  \n  \n  const movieGenres = movie.genres\n    ? movie.genres.map(genre => genre.name).join(' / ')\n    : '';\n\n    const from = location.state?.from;\n\n    const goBack = () => {navigate(from ?? '/movies')};\n\n    //const goBack = () => navigate(-1);\n\n  return (\n    <div>\n      <button onClick={goBack}>\n          Go back\n        </button>\n\n      {movie && <h2>{movie.title}</h2>}\n      <img\n        src={`https://image.tmdb.org/t/p/w300/${movie.poster_path}`}\n        alt={movie.title}\n      />\n      <div>\n        <p>User Score: {movie.popularity}</p>\n\n        <p>Overview</p>\n        <p>{movie.overview}</p>\n\n        <p>Genres</p>\n        <p>{movieGenres}</p>\n      </div>\n      <div>\n        <h2>Additional Information</h2>\n        <NavLink state={{from}} to={`/movies/${movieId}/reviews`}>\n          <p >Reviews</p>\n        </NavLink>\n\n        <NavLink state={{from}} to={`/movies/${movieId}/cast`}>\n\n          <p >Cast</p>\n        </NavLink>\n        <hr />\n        <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n      </div>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport {getSingleMovie} from '../../services/api';\nimport { useLocation } from 'react-router-dom';\nimport {MovieDetails} from '../../components/MovieDetails/MovieDetails';\n\nconst MovieSinglePage = () => {\n\n    const {movieId}= useParams();\n       const [movie, setMovie] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const location = useLocation();\n\n      useEffect(() => {\n        const fetchMovie = async () => {\n          try {\n            setLoading(true);\n            \n            const result = await getSingleMovie(movieId);\n            setMovie(result);\n          } catch (error) {\n            setError(error.message);\n          } finally {\n            setLoading(false);\n          }\n        };\n        fetchMovie();\n      }, [movieId]);\n      \n\nreturn(\n<div>\n\n<MovieDetails  movie={movie} id = {movieId}/>\n</div>\n)\n}\n\nexport default MovieSinglePage;","import axios from 'axios';\n\n// const api_key = \"42198471976a286e57d85c87e47247c5\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '42198471976a286e57d85c87e47247c5',\n    _limit: 20,\n  },\n});\n//trending/all/day?api_key=<<api_key>>\n\nexport const getTrendingMovies = async (page = 1) => {\n  const { data } = await instance.get(`/trending/movie/day?`, {\n    params: {\n      page,\n    },\n  });\n  \n  return data.results;\n};\n\n\nexport const getSingleMovie = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n\n  return data;\n};\n\nexport const searchMovies = async query => {\n  const { data } = await instance.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  //console.log(data.cast);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n"],"names":["MovieDetails","movie","location","useLocation","navigate","useNavigate","movieId","useParams","movieGenres","genres","map","genre","name","join","from","state","onClick","title","src","poster_path","alt","popularity","overview","to","Suspense","fallback","useState","setMovie","setLoading","setError","useEffect","fetchMovie","getSingleMovie","result","message","id","instance","axios","baseURL","params","api_key","_limit","getTrendingMovies","page","get","data","results","searchMovies","query","getCast","cast","getReviews"],"sourceRoot":""}