{"version":3,"file":"static/js/106.20b19061.chunk.js","mappings":"wMAGaA,GAAUC,E,QAAAA,GAAOC,EAAAA,GAAPD,CAAH,oQ,SCSlB,EATc,WAGZ,OAEG,SAACD,EAAD,GAGF,C,wLCTQG,EAAYF,EAAAA,GAAAA,IAAH,0CAKTG,EAAWH,EAAAA,GAAAA,GAAH,oMAaRI,EAAWJ,EAAAA,GAAAA,EAAH,6D,SCkCrB,EA9CsB,WACpB,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdF,GAAW,GAFG,UAGIG,EAAAA,EAAAA,IAAQX,GAHZ,OAGRY,EAHQ,OAIdR,EAAQQ,GAJM,gDAMdN,EAAS,0BANK,yBAQdE,GAAW,GARG,4EAAH,qDAWfE,GACD,GAAE,CAACV,KAGF,UAACH,EAAD,WACGU,IAAW,SAACM,EAAA,EAAD,IACXR,IAAS,yBAAMA,KAChB,SAACP,EAAD,UACGK,EAAKW,KAAI,SAAAC,GACR,OACE,2BACE,gBACEC,IAAG,yCAAoCD,EAASE,cAChDC,IAAG,UAAKH,EAASI,KAAd,gBAEL,4BACE,UAACpB,EAAD,oBAAiBgB,EAASI,SAC1B,UAACpB,EAAD,yBAAsBgB,EAASK,kBAP1BL,EAASM,IAAKC,EAAAA,EAAAA,MAW1B,QAIR,C,wLChDKC,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,OAAQ,MAKCC,EAAiB,mCAAG,2GAAOC,EAAP,+BAAc,EAAd,SACRP,EAASQ,IAAT,uBAAqC,CAC1DL,OAAQ,CACNI,KAAAA,KAH2B,uBACvBE,EADuB,EACvBA,KADuB,kBAOxBA,EAAKC,SAPmB,2CAAH,qDAWjBC,EAAc,mCAAG,WAAMb,GAAN,yFACLE,EAASQ,IAAT,iBAAuBV,IADlB,uBACpBW,EADoB,EACpBA,KADoB,kBAGrBA,GAHqB,2CAAH,sDAMdG,EAAY,mCAAG,WAAMC,GAAN,yFACHb,EAASQ,IAAT,gBAA8B,CACnDL,OAAQ,CACNU,MAAAA,KAHsB,uBAClBJ,EADkB,EAClBA,KADkB,kBAOnBA,EAAKC,SAPc,2CAAH,sDAUZtB,EAAO,mCAAG,WAAMU,GAAN,yFACEE,EAASQ,IAAT,iBAAuBV,EAAvB,aADF,uBACbW,EADa,EACbA,KADa,kBAGdA,EAAK7B,MAHS,2CAAH,sDAMPkC,EAAU,mCAAG,WAAMhB,GAAN,yFACDE,EAASQ,IAAT,iBAAuBV,EAAvB,aADC,uBAChBW,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,qD,wDC7ChB,IAkBIX,EAAS,eAACgB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACrB,EAAIsB,GAWvD,OAREtB,IAFFsB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","pages/MovieCastPage/MovieCastPage.styled.js","pages/MovieCastPage/MovieCastPage.jsx","services/api.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { ColorRing} from 'react-loader-spinner';\nimport styled from '@emotion/styled';\n\nexport const Spinner = styled(ColorRing)`\nvisible={true}\n  height=\"80\";\n  width=\"80\";\n  align-items: center;\n  ariaLabel=\"blocks-loading\";\n  wrapperStyle={{}};\n  wrapperClass=\"blocks-wrapper\";\n  colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87'];\n  `;","import React from 'react';\nimport { Spinner } from './Loader.styled'; \n\n const Loader = () => {\n\n\n    return(\n    \n       <Spinner></Spinner>\n    )\n    \n    }\n  export default Loader;","import styled from 'styled-components';\n\nexport const Container = styled.div`\npadding: 40px;\n\n`;\n\nexport const CastList = styled.ul`\n\nlist-style: none;\nmargin-left: auto;\nmargin-right: auto;\nmargin-top: 20px;\ndisplay: flex;\nflex-wrap: wrap;\ngap: 20px;\npadding: 0;\njustify-content: space-around;\n`;\n\nexport const SubTitle = styled.p`\nfont-size: +4;\nfont-weight: 600;\n\n`;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from '../../services/api';\nimport { nanoid } from 'nanoid';\nimport { ImUserMinus } from 'react-icons/im';\nimport Loader from '../../components/Loader/Loader';\nimport {Container, CastList, SubTitle} from './MovieCastPage.styled';\n\nconst MovieCastPage = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setLoading(true);\n        const res = await getCast(movieId);\n        setCast(res);\n      } catch (error) {\n        setError('We`ve nothing found...');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <Container>\n      {loading && <Loader/>}\n      {error && <div>{error}</div>}\n      <CastList>\n        {cast.map(castItem => {\n          return (\n            <li key={castItem.id + nanoid()}>\n              <img\n                src={`https://image.tmdb.org/t/p/w200${castItem.profile_path}`}\n                alt={`${castItem.name} portrait`}\n              />\n              <div>\n                <SubTitle>Name: {castItem.name}</SubTitle>\n                <SubTitle>Character: {castItem.character}</SubTitle>\n              </div>\n            </li>\n          );\n        })}\n      </CastList>\n    </Container>\n  );\n};\n\nexport default MovieCastPage;\n","import axios from 'axios';\n\n// const api_key = \"42198471976a286e57d85c87e47247c5\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '42198471976a286e57d85c87e47247c5',\n    _limit: 20,\n  },\n});\n//trending/all/day?api_key=<<api_key>>\n\nexport const getTrendingMovies = async (page = 1) => {\n  const { data } = await instance.get(`/trending/movie/day?`, {\n    params: {\n      page,\n    },\n  });\n  \n  return data.results;\n};\n\n\nexport const getSingleMovie = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n\n  return data;\n};\n\nexport const searchMovies = async query => {\n  const { data } = await instance.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  //console.log(data.cast);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Spinner","styled","ColorRing","Container","CastList","SubTitle","movieId","useParams","useState","cast","setCast","error","setError","loading","setLoading","useEffect","fetchCast","getCast","res","Loader","map","castItem","src","profile_path","alt","name","character","id","nanoid","instance","axios","baseURL","params","api_key","_limit","getTrendingMovies","page","get","data","results","getSingleMovie","searchMovies","query","getReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}