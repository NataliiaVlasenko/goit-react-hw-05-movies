{"version":3,"file":"static/js/892.9b383971.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/MovieList/MovieList.jsx","components/SearchBar/SearchBar.jsx","pages/MoviesPage/MoviePage.styled.js","pages/MoviesPage/MoviesPage.jsx","services/api.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { ColorRing} from 'react-loader-spinner';\nimport styled from '@emotion/styled';\n\nexport const Spinner = styled(ColorRing)`\nvisible={true}\n  height=\"80\";\n  width=\"80\";\n  align-items: center;\n  ariaLabel=\"blocks-loading\";\n  wrapperStyle={{}};\n  wrapperClass=\"blocks-wrapper\";\n  colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87'];\n  `;","import React from 'react';\nimport { Spinner } from './Loader.styled'; \n\n const Loader = () => {\n\n\n    return(\n    \n       <Spinner></Spinner>\n    )\n    \n    }\n  export default Loader;","import { Link} from \"react-router-dom\";\nimport { nanoid } from 'nanoid';\nimport { useLocation } from 'react-router-dom';\n\n\nexport const MovieList = ({movies}) => {\n\nconst location = useLocation();\n\n    const elements = movies.map(({id, title, name}) => \n    \n    <li key={id + nanoid()}>\n                <Link  to={`/movies/${id}`} state={ {from: location} }>{title || name}</Link>\n        </li>);\n\n\n    return <ul>{elements}</ul>\n}\n\n","import 'react-toastify/dist/ReactToastify.css';\nimport { toast } from 'react-toastify';\nimport { useState } from 'react';\n\n\nexport const SearchBar = ({ onSearch }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n   const handleQuerySearch = e => {\n    setSearchQuery(e.target.value.toLowerCase());\n    //console.log(\"searchQuery\",searchQuery);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (searchQuery.trim() === '') {\n        return toast.error('your search is empty, try again', {\n            theme: 'colored',\n          });\n    }\n\n    onSearch(searchQuery);\n    setSearchQuery('');\n\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"searchQuery\"\n          value={searchQuery}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search ...\"\n          onChange={handleQuerySearch}\n          \n        />\n        <button\n          type=\"submit\"\n                 \n        >\n          Search\n        </button>\n      </form>\n    </>\n  );\n};\n","import styled from 'styled-components';\nexport const Container = styled.div`\npadding: 40px;\n\n`;","import { SearchBar } from '../../components/SearchBar/SearchBar';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovies } from '../../services/api';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { toast } from 'react-toastify';\nimport Loader from '../../components/Loader/Loader';\nimport {Container} from './MoviePage.styled';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState(false);\n  \n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query');\n \n  useEffect(() => {\n    if (!query) {\n       return;\n    }\n     setStatus('pending');\n\n    searchMovies(query)\n      .then(response => {\n        setMovies([...response]);\n        setStatus('resolved');\n\n        if (response.length === 0) {\n          setMovies([]);\n\n          return toast.error('it`s nothing have found, try again', {\n            theme: 'colored',\n          });\n        }\n      })\n      .catch(error => {\n        setError(error);\n        setStatus('rejected');\n      });\n  }, [query,error]);\n\n  const handleSearch = value => {\n\n    setSearchParams({ query: value });\n    setMovies([]);\n  };\n\n  return (\n    <Container>\n     \n      <SearchBar onSearch={handleSearch} />\n      {status === 'pending' && <Loader/>}\n      {movies.length > 0 && <MovieList movies={movies} />}\n    </Container>\n  );\n};\nexport default MoviesPage;\n","import axios from 'axios';\n\n// const api_key = \"42198471976a286e57d85c87e47247c5\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '42198471976a286e57d85c87e47247c5',\n    _limit: 20,\n  },\n});\n//trending/all/day?api_key=<<api_key>>\n\nexport const getTrendingMovies = async (page = 1) => {\n  const { data } = await instance.get(`/trending/movie/day?`, {\n    params: {\n      page,\n    },\n  });\n  \n  return data.results;\n};\n\n\nexport const getSingleMovie = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n\n  return data;\n};\n\nexport const searchMovies = async query => {\n  const { data } = await instance.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  //console.log(data.cast);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Spinner","styled","ColorRing","MovieList","movies","location","useLocation","elements","map","id","title","name","to","state","from","nanoid","SearchBar","onSearch","useState","searchQuery","setSearchQuery","onSubmit","e","preventDefault","trim","toast","theme","type","value","autoComplete","autoFocus","placeholder","onChange","target","toLowerCase","Container","setMovies","status","setStatus","error","setError","useSearchParams","searchParams","setSearchParams","query","get","useEffect","searchMovies","then","response","length","catch","Loader","instance","axios","baseURL","params","api_key","_limit","getTrendingMovies","page","data","results","getSingleMovie","getCast","cast","getReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}