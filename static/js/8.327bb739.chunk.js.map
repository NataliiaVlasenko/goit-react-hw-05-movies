{"version":3,"file":"static/js/8.327bb739.chunk.js","mappings":"uOA0DA,UArDgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,8GAECC,EAAAA,EAAAA,IAAWT,GAFZ,UAEXU,EAFW,OAGjBN,EAAWM,GAEI,IAAfA,EAAIC,OALa,yCAMdC,EAAAA,GAAAA,KAAW,yBAA0B,CACxCC,MAAO,aAPU,uDAWjBP,EAAS,EAAD,IAXS,yDAAH,qDAelBE,GAED,GAAE,CAACR,IAEN,IAAMc,EAAWX,EAAQY,KAAI,SAAAC,GAEzB,OACE,2BACE,oCAAYA,EAAOC,WACnB,uBAAID,EAAOE,YAFJF,EAAOG,GAOnB,IAID,OACE,gCACGd,IAAS,yBAAMA,KAEhB,wBACGS,MAMR,C,wLCpDKM,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,OAAQ,MAKCC,EAAiB,mCAAG,2GAAOC,EAAP,+BAAc,EAAd,SACRP,EAASQ,IAAT,uBAAqC,CAC1DL,OAAQ,CACNI,KAAAA,KAH2B,uBACvBE,EADuB,EACvBA,KADuB,kBAOxBA,EAAKC,SAPmB,2CAAH,qDAWjBC,EAAc,mCAAG,WAAMZ,GAAN,yFACLC,EAASQ,IAAT,iBAAuBT,IADlB,uBACpBU,EADoB,EACpBA,KADoB,kBAGrBA,GAHqB,2CAAH,sDAMdG,EAAY,mCAAG,WAAMC,GAAN,yFACHb,EAASQ,IAAT,gBAA8B,CACnDL,OAAQ,CACNU,MAAAA,KAHsB,uBAClBJ,EADkB,EAClBA,KADkB,kBAOnBA,EAAKC,SAPc,2CAAH,sDAUZI,EAAO,mCAAG,WAAMf,GAAN,yFACEC,EAASQ,IAAT,iBAAuBT,EAAvB,aADF,uBACbU,EADa,EACbA,KADa,kBAGdA,EAAKM,MAHS,2CAAH,sDAMP1B,EAAU,mCAAG,WAAMU,GAAN,yFACDC,EAASQ,IAAT,iBAAuBT,EAAvB,aADC,uBAChBU,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,qD","sources":["pages/MovieReviewsPage/MovieReviewsPage.jsx","services/api.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from '../../services/api';\nimport { toast } from 'react-toastify';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const res = await getReviews(movieId);\n        setReviews(res);\n\n    if (res.length === 0 ){\n    return toast.warn('reviews are not found ', {\n        theme: 'colored',\n      })\n}\n      } catch (error) {\n        setError(error);\n        \n      }\n    };\n    fetchReviews();\n   \n  }, [movieId]);\n\nconst elements = reviews.map(review => {\n          \n    return (\n      <li key={review.id}>\n        <p>Author: {review.author}</p>\n        <p>{review.content}</p>\n      </li>\n    );\n\n    \n  })\n\n\n\n  return (\n    <>\n      {error && <div>{error}</div>}\n      \n      <ul>\n        {elements}\n      </ul>\n    \n      {/* {reviews} */}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\n// const api_key = \"42198471976a286e57d85c87e47247c5\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '42198471976a286e57d85c87e47247c5',\n    _limit: 20,\n  },\n});\n//trending/all/day?api_key=<<api_key>>\n\nexport const getTrendingMovies = async (page = 1) => {\n  const { data } = await instance.get(`/trending/movie/day?`, {\n    params: {\n      page,\n    },\n  });\n  \n  return data.results;\n};\n\n\nexport const getSingleMovie = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n\n  return data;\n};\n\nexport const searchMovies = async query => {\n  const { data } = await instance.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  //console.log(data.cast);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n"],"names":["movieId","useParams","useState","reviews","setReviews","error","setError","useEffect","fetchReviews","getReviews","res","length","toast","theme","elements","map","review","author","content","id","instance","axios","baseURL","params","api_key","_limit","getTrendingMovies","page","get","data","results","getSingleMovie","searchMovies","query","getCast","cast"],"sourceRoot":""}